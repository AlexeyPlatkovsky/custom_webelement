buildscript {
  dependencies {
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8'
  }
}

plugins {
  id 'io.franzbecker.gradle-lombok' version '4.0.0'
  id 'checkstyle'
  id 'java'
  id 'idea'
}

ext {
  archivesBaseName = 'autotests'
}

sourceCompatibility = JavaVersion.VERSION_14
targetCompatibility = JavaVersion.VERSION_14

idea {
  module {
    outputDir = file("${project.buildDir}/classes/java/main")
    testOutputDir = file("${project.buildDir}/classes/java/test")
  }
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  implementation(
          [group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'],
          [group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.5.3'],
          [group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'],
          [group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'],
          [group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.9.2'],
          [group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.8.0'],
          [group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version: '4.8.0'],
          [group: 'org.testng', name: 'testng', version: '7.3.0']
  )
  implementation 'org.jetbrains:annotations:24.0.1'
  compileOnly 'org.projectlombok:lombok:1.18.26'
  annotationProcessor 'org.projectlombok:lombok:1.18.26'

  testCompileOnly 'org.projectlombok:lombok:1.18.26'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
}

//=================================== Test =====================================

test {
  def base_url = project.hasProperty('base_url') ? project.base_url : ''
  systemProperty 'base_url', base_url

  def browser_version = project.hasProperty('browser_version') ? project.browser_version : 'latest'
  systemProperty 'browser_version', browser_version

  def build_number = project.hasProperty('build_number') ? project.build_number : new Date().format('MMddyyhhmmss')
  systemProperty 'build_number', build_number

  def driver = project.hasProperty('driver') ? project.driver : 'CHROME'
  systemProperty 'driver', driver

  def lambda_key = project.hasProperty('lambda_key') ? project.remote_key : ''
  systemProperty 'lambda_key', lambda_key

  def lambda_username = project.hasProperty('lambda_username') ? project.remote_username : ''
  systemProperty 'lambda_username', lambda_username

  def locale = project.hasProperty('locale') ? project.locale : 'en-US'
  systemProperty 'locale', locale

  def os = project.hasProperty('os') ? project.suite : 'windows'
  systemProperty 'os', os

  def platform = project.hasProperty('platform') ? project.platform : 'Windows 10'
  systemProperty 'platform', platform

  def remote_browser = project.hasProperty('remote_browser') ? project.browser : 'CHROME'
  systemProperty 'remote_browser', remote_browser

  def screen_maximize = project.hasProperty('screen_maximize') ? project.screen_maximize : true
  systemProperty 'screen_maximize', screen_maximize

  def screen_resolution = project.hasProperty('screen_resolution') ? project.screen_resolution : '1920,1080'
  systemProperty 'screen_resolution', screen_resolution

  def suite = project.hasProperty('suite') ? project.suite : 'ui, unit'
  systemProperty 'suite', suite

//testNG settings
  def exclude = project.hasProperty('exclude') ? project.exclude : 'disabled'
  def thread_count = project.hasProperty('thread_count') ? project.thread_count : 2

  useTestNG() {
    testLogging.showStandardStreams = true
    useDefaultListeners = true
    outputDirectory = file("$projectDir/build/reports/tests/testng")
    includeGroups suite
    excludeGroups exclude
    parallel 'methods'
    threadCount = thread_count as int
  }
}
