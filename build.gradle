buildscript {
  dependencies {
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8'
  }
}

plugins {
  id 'io.franzbecker.gradle-lombok' version '4.0.0'
  id 'checkstyle'
  id 'java'
  id 'idea'
}

ext {
  archivesBaseName = 'autotests'
}

sourceCompatibility = 8.0
targetCompatibility = 8.0

idea {
  module {
    outputDir = file("${project.buildDir}/classes/java/main")
    testOutputDir = file("${project.buildDir}/classes/java/test")
  }
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    implementation 'com.jayway.jsonpath:json-path:2.7.0'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'io.github.bonigarcia:webdrivermanager:5.2.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
    implementation 'org.json:json:20220320'
    implementation 'org.seleniumhq.selenium:selenium-java:4.3.0'
    implementation 'org.seleniumhq.selenium:selenium-remote-driver:4.3.0'
    implementation 'org.testng:testng:7.6.1'
}

//=================================== Test =====================================

task runTests(type: Test) {
  def base_url = project.hasProperty('base_url') ? project.base_url : ''
  systemProperty 'base_url', base_url

  def browser = project.hasProperty('browser') ? project.browser : 'CHROME'
  systemProperty 'browser', browser

  def browser_version = project.hasProperty('browser_version') ? project.browser_version : 'latest'
  systemProperty 'browser_version', browser_version

  def build_number = project.hasProperty('build_number') ? project.build_number : new Date().format('MMddyyhhmmss')
  systemProperty 'build_number', build_number

  def driver = project.hasProperty('driver') ? project.driver : 'CHROME'
  systemProperty 'driver', driver

  def platform = project.hasProperty('platform') ? project.platform : 'Windows 10'
  systemProperty 'platform', platform

  def remote_key = project.hasProperty('remote_key') ? project.remote_key : ''
  systemProperty 'remote_key', remote_key

  def remote_option = project.hasProperty('remote_option') ? project.remote_option : 'lambdatest'
  systemProperty 'remote_option', remote_option

  def remote_username = project.hasProperty('remote_username') ? project.remote_username : ''
  systemProperty 'remote_username', remote_username

  def screen_resolution = project.hasProperty('screen_resolution') ? project.screen_resolution : '1920x1080'
  systemProperty 'screen_resolution', screen_resolution

  def suite = project.hasProperty('suite') ? project.suite : 'sanity'
  systemProperty 'suite', suite

  def thread_count = project.hasProperty('thread_count') ? project.thread_count : 1

  def exclude = project.hasProperty('exclude') ? project.exclude : 'disabled'

  useTestNG() {
    testLogging.showStandardStreams = true
    useDefaultListeners = true
    outputDirectory = file("$projectDir/build/reports/tests/testng")
    includeGroups suite
    excludeGroups exclude
    parallel 'methods'
    threadCount = thread_count as int
  }
}
